library("GEOquery")
gds <- getGEO(filename="GDS3420_full.soft.gz")
gds <- getGEO('GDS3420')
geData <- Table(gds)
geData
dim(geData)
names(geData)
geData2$"Gene ID"
str(geData)
geData2 <- geData[which(geData[, 41] != "NA"),]
gds <- getGEO(filename='GDS3420_full.soft')
geData <- Table(gds)
geData2 <- geData[which(geData[, 41] != "NA"),]
str(geData)
str(geData)
geData2 <- geData[which(geData$'Gene ID' != "NA"),]
which(geData$'Gene ID' != "NA"),]
geData2 <- geData[which(geData$'Gene ID' != "NA"),]
dim(geData2)
dim(geData)
geData2 <- geData[which(geData[, 41] != "NA"),]
dim(geData2)
geData2 <- geData[which(geData['Gene ID'] != "NA"),]
dim(geData2)
hrs4 <- unlist( strsplit( Meta(gds)$sample_id[1], ',' ) )
hrs24 <- unlist( strsplit( Meta(gds)$sample_id[2], ',' ) )
hrs4
hrs24
Meta(gds)$sample_id[1]
Meta(gds)$sample_id[2]
strsplit( Meta(gds)$sample_id[2], ',' )
unlist( strsplit( Meta(gds)$sample_id[2], ',' ) )
gset <- getGEO('GDS3420')
eset           <- GDS2eSet(gset, do.log2 = FALSE)
str(gset)
eset           <- GDS2eSet(gset, do.log2 = FALSE)
str(eset)
gset        <- getGEO('GDS3420')
gset        <- getGEO('GDS3420', destdir = '.')
eset        <- GDS2eSet(gset, do.log2 = FALSE)
gene.names  <- as.character(gset@dataTable@table$IDENTIFIER)
X           <- exprs(eset) # Get Expression Data
pData       <- pData(eset)
rownames(X) <- gene.names
str(X)
setwd("/Volumes/Data/project/Sysmic/11")
rownames(X)
gset        <- getGEO('GDS3420', destdir = '.')
eset        <- GDS2eSet(gset, do.log2 = FALSE)
gene.names  <- as.character(gset@dataTable@table$IDENTIFIER)
X           <- exprs(eset) # Get Expression Data
pData       <- pData(eset)
rownames(X) <- gene.names
# KNN imputation
X <- X[rowSums(is.na(X)) != ncol(X), ] # remove rows with missing data
X <- X[rowSums(X != 0) != 0,] # remove all zeros
imputation <- impute.knn(X)
X          <- imputation$data
# auto-detect if data is log transformed
scalable <- function(X) {
  #  produce sample quantiles corresponding to the given probabilities
  qx <- as.numeric(quantile(X, c(0.0, 0.25, 0.5, 0.75, 0.99, 1.0), na.rm = T))
  logc <- (qx[5] > 100) ||
      (qx[6] - qx[1] > 50 && qx[2] > 0) ||
      (qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
  return (logc)
}
# If not log transformed, do the log2 transformed
if (scalable(X)) {
  X[which(X <= 0)] <- NaN # not possible to log transform negative numbers
  X <- log2(X)
}
gds <- getGEO(filename='GDS3420_full.soft')
geData <- Table(gds)
geData2 <- geData[which(geData['Gene ID'] != "NA"),]
str(geData)
str(geData)
str(geData)
str(geData)
str(geData)
pData
setwd("/Volumes/Data/project/Sysmic/11")
pclass           <- pData['4 h']
pclass           <- pData['time']
pclass
expression.info  <- data.frame(pclass, Sample = rownames(pclass),
row.names = rownames(pclass))
expression.info
population1 <- '4 h'
population2 <- '24 h'
expression.info <- within(expression.info, {
  population        <- ifelse(factor.type %in% population1, "Group1",
                         ifelse(factor.type %in% population2, "Group2", NA))
})
factor.type <- 'time'
# Introduce two columns to expression.info :
#   1. population - new two groups, if not NA
#   2. population.colour - colour for two new two groups, if not black colour
expression.info <- within(expression.info, {
  population        <- ifelse(factor.type %in% population1, "Group1",
                         ifelse(factor.type %in% population2, "Group2", NA))
})
expression.info
pClass[0]
pClass
pClass <- pData['time']
pClass
pClass[0]
pClass[1]
pClass['time']
pClass['time',]
expression.info <- within(expression.info, {
  population        <- ifelse(factor.type %in% population1, "Group1",
                         ifelse(factor.type %in% population2, "Group2", NA))
})
expression.info
split_arg('4 h')
population1 <- c('4 h')
population2 <- c('24 h')
expression.info  <- data.frame(pclass, Sample = rownames(pclass),
row.names = rownames(pclass))
# Introduce two columns to expression.info :
#   1. population - new two groups, if not NA
#   2. population.colour - colour for two new two groups, if not black colour
expression.info <- within(expression.info, {
  population        <- ifelse(factor.type %in% population1, "Group1",
                         ifelse(factor.type %in% population2, "Group2", NA))
})
expression.info
population1
population2
factor.type
expression.info
expression.info <- within(expression.info, {
  population <- ifelse(time %in% population1, "Group1",
                       ifelse(time %in% population2, "Group2", NA))
})
expression.info
geData_hrs4 <- data.matrix(geData2[,names(geData2) %in% hrs4])
geData_hrs4
hist( geData_hrs4[1,], main=genes[1] )
genes <- geData2$"Gene ID"
hist( geData_hrs4[1,], main=genes[1] )
plot( density(geData_hrs4[1,]), main=genes[1] )
makeqq <- function(d1){
 md1 <- mean(d1)
 sd1 <- sd(d1)
 standardized <- (d1-md1)/sd1
 qqnorm( standardized )
 abline(0,1,col='red')
}
makeqq <- function(d1){
 md1 <- mean(d1)
 sd1 <- sd(d1)
 standardized <- (d1-md1)/sd1
 qqnorm( standardized )
 abline(0,1,col='red')
}
makeqq( geData_hrs4[1,] )
t.test( geData_hrs4[1,] )
t.test( geData_hrs4[1,] )$p.value
data <- rnorm(20,0,1)
data
t.test(data)$p.value
t.test(data)$p.value
pvalues <- sapply(1:1000, function(i) {
  data <- rnorm(20,0,1)
  t.test(data)$p.value
})
pvalues
which(pvalues>0.1)
len(which(pvalues>0.1))
length(which(pvalues>0.1))
length(which(pvalues<0.1))
length(which(pvalues<0.05))
length(which(pvalues<0.01))
draw_histogram(pvalues)
draw_histogram <- function(dataset) {
  dist_mean <- mean(dataset)
  dist_sd <- sd(dataset)
  gg <- ggplot(as.data.frame(dataset), aes(dataset))
  gg <- gg + geom_histogram(aes(y=..density.., fill=..count..))
  gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
  gg <- gg + stat_function(fun=dnorm, color="red",
                           args=list(mean=dist_mean,sd=dist_sd))
  # Adds a density plot on top
  gg <- gg + geom_density(alpha = 0.2, fill="steelblue", colour="steelblue") 
  gg <- gg + ggtitle(paste("Histogram", "( Mean:", round(dist_mean,2), '|',
                           "sd:", signif(dist_sd,2), ")"))
  return(gg)
}
draw_histogram(pvalues)
library('ggplot2')
draw_histogram <- function(dataset) {
  dist_mean <- mean(dataset)
  dist_sd <- sd(dataset)
  gg <- ggplot(as.data.frame(dataset), aes(dataset))
  gg <- gg + geom_histogram(aes(y=..density.., fill=..count..))
  gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
  gg <- gg + stat_function(fun=dnorm, color="red",
                           args=list(mean=dist_mean,sd=dist_sd))
  # Adds a density plot on top
  gg <- gg + geom_density(alpha = 0.2, fill="steelblue", colour="steelblue") 
  gg <- gg + ggtitle(paste("Histogram", "( Mean:", round(dist_mean,2), '|',
                           "sd:", signif(dist_sd,2), ")"))
  return(gg)
}
draw_histogram(pvalues)
pvalues <- sapply(1:1000, function(i) {
  data <- rnorm(20,0,1)
  t.test(data)$p.value
})
### Question 2
length(which(pvalues<0.1))
# 102
length(which(pvalues<0.05))
# 49
length(which(pvalues<0.01))
# 9
library('ggplot2')
draw_histogram <- function(dataset) {
  dist_mean <- mean(dataset)
  dist_sd <- sd(dataset)
  gg <- ggplot(as.data.frame(dataset), aes(dataset))
  gg <- gg + geom_histogram(aes(y=..density.., fill=..count..))
  gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
  gg <- gg + stat_function(fun=dnorm, color="red",
                           args=list(mean=dist_mean,sd=dist_sd))
  # Adds a density plot on top
  gg <- gg + geom_density(alpha = 0.2, fill="steelblue", colour="steelblue") 
  gg <- gg + ggtitle(paste("Histogram", "( Mean:", round(dist_mean,2), '|',
                           "sd:", signif(dist_sd,2), ")"))
  return(gg)
}
draw_histogram(pvalues)
pvalues <- sapply(1:1000, function(i) {
  t.test(rnorm(20,0,1))$p.value
})
pvalues <- sapply(1:1000000000, function(i) {
  t.test(rnorm(20,0,1))$p.value
})
funNA <- function(x){ 
  return( sum(is.na(x)) )
}
numNA <- apply(geData_hrs4, MARGIN=1, funNA )
indices <- which(numNA <= 5)
geData_hrs4 <- geData_hrs4[indices, ]
genes <- genes[indices]
genes
qnumNA <- apply(geData_hrs4, MARGIN=1, sum(is.na(x)))
numNA <- apply(geData_hrs4, MARGIN=1, function(x) { sum(is.na(x)) })
numNA <- apply(geData_hrs4, MARGIN=1, function(x) sum(is.na(x)) )
foldchange <- apply(geData_hrs4, MARGIN=1, function(x){
  median( exp(as.numeric(x)), na.rm=T)
})
tresults <- apply(geData_hrs4, MARGIN=1, function(x){
  t.test(as.numeric(x))$p.value
})
hist(tresults, nclass=500, main="t-test pvalues", xlab="p value")
symbols <- geData2$IDENTIFIER[indices]
results_hrs4 <- data.frame( pvalue=tresults, FC=foldchange, id=genes, symbol=symbols )
hits <- results_hrs4[ which( results_hrs4$pvalue < 2.57e-6 & results_hrs4$FC > 2 ), ]
hits <- hits[order(hits$FC, decreasing=T),
]
hits
results_hrs4
hits
foldchange <- apply(geData_hrs4, MARGIN=1, function(x){
  median( exp(as.numeric(x)), na.rm=T)
})
foldchange
tresults
hist(tresults, nclass=500, main="t-test pvalues", xlab="p value")
geData_hrs4
q()
geData2 <- geData[which( (geData['Gene ID'] != "") & (geData['Gene ID'] != "NA") ),]
dim(geData2)
geData2 <- geData[which(geData['Gene ID'] != "NA" ),]
dim(geData2)
geData['Gene ID']
geData2 <- geData[which( (geData['IDENTIFIER'] != "") & (geData['Gene ID'] != "NA") ),]
dim(geData2)
geData2 <- geData[which( (geData['IDENTIFIER'] != "") & (geData['IDENTIFIER'] != "NA") ),]
dim(geData2)
str(geData)
dim(geData)
dim(geData2)
gds <- getGEO(filename='GDS3420_full.soft')
library("GEOquery")
gds <- getGEO(filename='GDS3420_full.soft')
source("http://bioconductor.org/biocLite.R")
biocLite("GEOquery")
gds <- getGEO(filename='GDS3420_full.soft')
library("GEOquery")
gds <- getGEO(filename='GDS3420_full.soft')
geData <- Table(gds)
dim(geData)
geData2 <- geData[which( (geData['Gene ID'] != "") & (geData['Gene ID'] != "NA") ),]
dim(geData2)
geData2 <- geData[which(geData['Gene ID'] != "NA" ),]
dim(geData2)
geData2 <- geData[which( (geData['IDENTIFIER'] != "") & (geData['IDENTIFIER'] != "NA") ),]
hrs4 <- unlist( strsplit( Meta(gds)$sample_id[1], ',' ) )
hrs24 <- unlist( strsplit( Meta(gds)$sample_id[2], ',' ) )
geData_hrs4 <- data.matrix(geData2[,names(geData2) %in% hrs4])
genes <- geData2$"Gene ID"
makeqq <- function(d1){
 md1 <- mean(d1)
 sd1 <- sd(d1)
 standardized <- (d1-md1)/sd1
 qqnorm( standardized )
 abline(0,1,col='red')
}
# makeqq( geData_hrs4[1,] )
# t.test( geData_hrs4[1,] )$p.value
numNA <- apply(geData_hrs4, MARGIN=1, function(x) sum(is.na(x)) )
indices <- which(numNA <= 5)
geData_hrs4 <- geData_hrs4[indices, ]
genes <- genes[indices]
foldchange <- apply(geData_hrs4, MARGIN=1, function(x){
  median( exp(as.numeric(x)), na.rm=T)
})
tresults <- apply(geData_hrs4, MARGIN=1, function(x){
  t.test(as.numeric(x))$p.value
})
hist(tresults, nclass=500, main="t-test pvalues", xlab="p value")
symbols <- geData2$IDENTIFIER[indices]
results_hrs4 <- data.frame( pvalue=tresults, FC=foldchange, id=genes, symbol=symbols )
hits <- results_hrs4[ which( results_hrs4$pvalue < 2.57e-6 & results_hrs4$FC > 2 ), ]
hits <- hits[order(hits$FC, decreasing=T),]
hits
dim(hits)
gds <- getGEO(filename='GDS3420_full.soft')
geData <- Table(gds)
geData2 <- geData[which( (geData['IDENTIFIER'] != "") & (geData['IDENTIFIER'] != "NA") ),]
dim(geData2)
geData2 <- geData[which( (geData['IDENTIFIER'] != "") & (geData['IDENTIFIER'] != "NA") ),]
geData2 <- geData[which( (geData['Gene ID'] != "") & (geData['Gene ID'] != "NA") ),]
dim(geData2)
q()
gds <- getGEO(filename='GDS3420_full.soft')
geData <- Table(gds)
# geData2 <- geData[which( (geData['Gene ID'] != "") & (geData['Gene ID'] != "NA") ),]
library("GEOquery")
gds <- getGEO(filename='GDS3420_full.soft')
geData <- Table(gds)
# geData2 <- geData[which( (geData['Gene ID'] != "") & (geData['Gene ID'] != "NA") ),]
geData2 <- geData[which( (geData['Gene ID'] != "") & (geData['Gene ID'] != "NA") ),]
hrs4 <- unlist( strsplit( Meta(gds)$sample_id[1], ',' ) )
hrs24 <- unlist( strsplit( Meta(gds)$sample_id[2], ',' ) )
geData_hrs4 <- data.matrix(geData2[,names(geData2) %in% hrs4])
genes <- geData2$"Gene ID"
# hist( geData_hrs4[1,], main=genes[1] )
# plot( density(geData_hrs4[1,]), main=genes[1] )
makeqq <- function(d1){
 md1 <- mean(d1)
 sd1 <- sd(d1)
 standardized <- (d1-md1)/sd1
 qqnorm( standardized )
 abline(0,1,col='red')
}
# makeqq( geData_hrs4[1,] )
# t.test( geData_hrs4[1,] )$p.value
numNA <- apply(geData_hrs4, MARGIN=1, function(x) sum(is.na(x)) )
indices <- which(numNA <= 5)
geData_hrs4 <- geData_hrs4[indices, ]
genes <- genes[indices]
foldchange <- apply(geData_hrs4, MARGIN=1, function(x){
  median( exp(as.numeric(x)), na.rm=T)
})
tresults <- apply(geData_hrs4, MARGIN=1, function(x){
  t.test(as.numeric(x))$p.value
})
hist(tresults, nclass=500, main="t-test pvalues", xlab="p value")
symbols <- geData2$IDENTIFIER[indices]
results_hrs4 <- data.frame( pvalue=tresults, FC=foldchange, id=genes, symbol=symbols )
hits <- results_hrs4[ which( results_hrs4$pvalue < 2.57e-6 & results_hrs4$FC > 2 ), ]
hits <- hits[order(hits$FC, decreasing=T),]
hits
dim(hits)
annotation(eset)
annotation(eset)
gds <- getGEO(filename='GDS3420_full.soft')
annotation(gds)
annotation(geData)
annotation(expr(gds))
annotation(GDS2eSet(gset, do.log2 = FALSE))
an <- annotation(GDS2eSet(gset, do.log2 = FALSE))
str(an)
an
eset <- GDS2eSet(gset, do.log2 = FALSE)
an <- annotation(eset)
str(an)
featureNames(eset)
mget(featureNames(eset), envir=getAnnMap("MAP", annChip), ifnotfound=NA)
gds      <- getGEO(filename='GDS3420_full.soft')
geData   <- Table(gds)
geData2  <- geData[which( (geData['Gene ID'] != "") & (geData['Gene ID'] != "NA") ),]
genes    <- geData2["Gene ID"]
str(geData)
geData2  <- geData[which( geData['Platform_ORF='] != "NA" ),]
geData2  <- geData[which( geData['Platform_ORF'] != "NA" ),]
dim(geData2)
geData2  <- geData[which( geData['Platform_ORF'] != "" ),]
dim(geData2)
gds      <- getGEO(filename='GDS3420_full.soft')
q+()
q()
